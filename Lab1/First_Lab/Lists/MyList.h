#pragma once

#include <string>

// общий родительский класс для всех реализаций списка
//   E - тип элементов
template <typename E>
class MyList {
public:
  // метод для добавления нового элемента в список
  //   virtual делает MyList абстрактным (нельзя создать объект),
  //   а реализации должны определить у себя этот метод
  virtual void add(E element)     = 0;
  // метод для получения элемента по индексу
  virtual E get(int index)        = 0;
  // метод для удаления элемента по индексу
  virtual E remove(int index)     = 0;
  // метод для получения размера списка
  virtual size_t getSize()        = 0;
  // метод для получения индекса элемента
  virtual int indexOf(E element)  = 0;
  // метод для получения строкового представления списка
  virtual std::string toString()  = 0;

  // метод для последовательного прохождения по всем элементам списка
  //   void b(E) - указатель на функцию,
  //   которая будет вызываться для каждого элемента
  virtual void forEach(void (*b)(E)) = 0;

  // метод для получения индекса первого элемента удовлетворяющего условию
  //   bool p(E) - указатель на функцию,
  //   которая будет проверять каждый элемент
  virtual int indexOfFirst(bool (*p)(E)) = 0;

  // метод для заполнения списка n элементами
  //   E g() - указатель на функцию,
  //   которая будет предоставлять эти элементы
  void fill(int n, E (*g)()) {
    for (int i = 0; i < n; i++) {
      this->add(g());
    }
  }
};
